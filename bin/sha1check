#!/usr/bin/env ruby

require 'digest'

class Sha1Checker

  attr_accessor :file_name, :confirmation_sha1, :file_sha1

  def initialize(file_name: nil, confirmation_sha1: nil)
    @file_name = file_name
    @confirmation_sha1 = confirmation_sha1
    @file_sha1 = Digest::SHA1.file(File.expand_path(file_name)).hexdigest if valid?
  end

  def valid?
    !@file_name.nil? && !@confirmation_sha1.nil?
  end

  def match?
    @confirmation_sha1 == @file_sha1
  end

end

module TermColor

  extend self

  def colorize(text, color_code)
    "\e[#{color_code}m#{text}\e[0m"
  end

  def red(text)
    colorize(text, 31)
  end

  def green(text)
    colorize(text, 32)
  end

end

checker = Sha1Checker.new(file_name: ARGV[0], confirmation_sha1: ARGV[1])

unless checker.valid?
  puts "Usage: sha1check filename sha1"
  exit
end

if checker.match?
  puts TermColor.green("SHA1 Confirmed: #{checker.file_name}")
else
  puts TermColor.red("SHA1 MISMATCH: #{checker.file_name}")
end

puts "Input File:   #{checker.file_sha1}"
puts "Confirmation: #{checker.confirmation_sha1}"